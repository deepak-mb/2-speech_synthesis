{"version":3,"sources":["SpeechSynthesiser.js","App.js","serviceWorker.js","index.js"],"names":["SpeechSynthesiser","state","textInput","pitchValue","rateValue","dataLang","onChange","e","preventDefault","_this","setState","Object","defineProperty","target","name","value","onSubmit","_this$state","alert","speech","Speech","setLanguage","setRate","setPitch","speak","text","queue","listeners","onstart","onend","onresume","onboundary","event","console","log","elapsedTime","then","catch","error","_this2","this","select","document","getElementById","hasBrowserSupport","onchange","lang","options","selectedIndex","getAttribute","init","data","voices","i","length","option","createElement","setAttribute","appendChild","_this$state2","react_default","a","className","id","type","style","height","maxLength","minLength","placeholder","alignItems","justifyContent","htmlFor","width","step","min","max","defaultValue","Component","App","src_SpeechSynthesiser","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.edf9a937.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Speech from \"speak-tts\";\nimport classnames from \"classnames\";\n\nclass SpeechSynthesiser extends Component {\n  state = {\n    textInput: \"\",\n    pitchValue: \"1\",\n    rateValue: \"1\",\n    dataLang: \"en-US\"\n  };\n  onChange = e => {\n    e.preventDefault();\n    // console.log(e.target.value);\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  onSubmit = e => {\n    e.preventDefault();\n    const { textInput, dataLang, rateValue, pitchValue } = this.state;\n\n    if (textInput === \"\") {\n      alert(\"Enter some text in the input box.\");\n    } else {\n      let speech = new Speech();\n      speech.setLanguage(dataLang);\n      speech.setRate(rateValue);\n      speech.setPitch(pitchValue);\n      // speech.speak(\"textInput\");\n      speech\n        .speak({\n          text: textInput,\n          queue: false,\n          listeners: {\n            onstart: () => {\n              // console.log(\"Start utterance\");\n            },\n            onend: () => {\n              // console.log(\"End utterance\");\n            },\n            onresume: () => {\n              // console.log(\"Resume utterance\");\n            },\n            onboundary: event => {\n              console.log(\n                event.name +\n                  \" boundary reached after \" +\n                  event.elapsedTime +\n                  \" milliseconds.\"\n              );\n            }\n          }\n        })\n        .then(() => {\n          // console.log(\"Success !\");\n        })\n        .catch(e => {\n          console.error(\"An error occurred :\", e);\n        });\n    }\n  };\n  componentDidMount() {\n    let select = document.getElementById(\"selectElement\");\n    //Voices start\n    let speech = new Speech();\n    if (speech.hasBrowserSupport()) {\n      // console.log(\"speech synthesis supported\");\n    }\n    select.onchange = () => {\n      const selected = select.options[select.selectedIndex];\n      const lang = selected.getAttribute(\"data-lang\");\n      this.setState({ dataLang: lang });\n    };\n    speech\n      .init()\n      .then(data => {\n        console.log(data.voices);\n        const voices = data.voices;\n        for (let i = 0; i < data.voices.length; i++) {\n          var option = document.createElement(\"option\");\n          option.text = voices[i].name;\n          option.value = i;\n          option.setAttribute(\"data-lang\", voices[i].lang);\n          select.appendChild(option, i);\n        }\n      })\n      .catch(e => {\n        console.error(\"An error occured while initializing : \", e);\n      });\n  }\n  render() {\n    const { pitchValue, rateValue, textInput } = this.state;\n    return (\n      <div className=\"App container text-center py-3\">\n        <h1>Speech synthesiser</h1>\n        <p className=\"my-5\">\n          Enter some text in the input below and press return or the \"play\"\n          button to hear it. change voices using the dropdown menu.\n        </p>\n        <form onSubmit={this.onSubmit}>\n          <input\n            id=\"textInputField\"\n            type=\"text\"\n            className=\"w-100 mt-4\"\n            style={{ height: \"50px\" }}\n            onChange={this.onChange}\n            name=\"textInput\"\n            maxLength=\"5000\"\n            minLength=\"3\"\n            // defaultValue=\"Hi\"\n            placeholder=\"Enter text here and click on play...\"\n          />\n          <div\n            className=\"d-flex my-3\"\n            style={{ alignItems: \"center-align\", justifyContent: \"center\" }}\n          >\n            <label htmlFor=\"rate\" className=\"\" style={{ width: \"10%\" }}>\n              Rate:{\" \"}\n            </label>\n            <input\n              type=\"range\"\n              name=\"rateValue\"\n              id=\"rate\"\n              step=\"0.1\"\n              min=\"0.5\"\n              max=\"2\"\n              defaultValue={rateValue}\n              className=\"mx-2\"\n              style={{ width: \"100%\" }}\n              onChange={this.onChange}\n            />\n            <div className=\"rateValue\" style={{ width: \"10%\" }}>\n              {this.state.rateValue === \"\" ? 0.5 : this.state.rateValue}\n            </div>\n          </div>\n          <div\n            className=\"d-flex my-3\"\n            style={{ alignItems: \"center-align\", justifyContent: \"center\" }}\n          >\n            <label htmlFor=\"pitch\" className=\"\" style={{ width: \"10%\" }}>\n              Pitch:{\" \"}\n            </label>\n            <input\n              type=\"range\"\n              name=\"pitchValue\"\n              id=\"rate\"\n              step=\"0.1\"\n              min=\"0\"\n              max=\"2\"\n              defaultValue={pitchValue}\n              className=\"mx-2\"\n              style={{ width: \"100%\" }}\n              onChange={this.onChange}\n            />\n            <div className=\"pitchValue\" style={{ width: \"10%\" }}>\n              {this.state.pitchValue === \"\" ? 0 : this.state.pitchValue}\n            </div>\n          </div>\n          <div>\n            <div className=\"input-group mb-3\">\n              <select className=\"custom-select\" id=\"selectElement\">\n                {/* <option defaultValue>Choose...</option> */}\n              </select>\n            </div>\n          </div>\n          <div>\n            <button className=\"btn btn-dark my-3 w-50\">PLAY</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SpeechSynthesiser;\n","import React from \"react\";\nimport SpeechSynthesiser from \"./SpeechSynthesiser\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <SpeechSynthesiser />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}